package com.pl.services;

import java.io.IOException;
import java.sql.*;
import java.util.*;

import com.pl.biblioteka.*;

public class StudentDBManager {

	List<Integer> listID = new ArrayList<Integer>();

	private Connection conn;
	private Statement stmt;
	private PreparedStatement addStudentStmt;
	private PreparedStatement getStudentStmt;
	private PreparedStatement deleteAllStudentsStmt;
	private PreparedStatement deleteStudentStmt;
	private PreparedStatement findStudentByNameStmt;
	private PreparedStatement findStudentBySurnameStmt;

	public StudentDBManager() {
		try {
			Properties props = new Properties();

			try {
				props.load(ClassLoader
						.getSystemResourceAsStream("com/pl/reso/jdbc.properties"));
			} catch (IOException e) {
				e.printStackTrace();
			}
			conn = DriverManager.getConnection(props.getProperty("url"));

			stmt = conn.createStatement();
			boolean StudentTableExists = false;

			ResultSet rs = conn.getMetaData().getTables(null, null, null, null);

			while (rs.next()) {
				if ("student".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					StudentTableExists = true;
					break;
				}
			}

			if (!StudentTableExists) {
				try{
					stmt.executeUpdate("CREATE TABLE student(id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
						+ "name varchar(40), surname varchar(40))");
				}
				catch(SQLException e){
					e.getStackTrace();
				}
			}

			addStudentStmt = conn
					.prepareStatement("INSERT INTO student (name, surname) VALUES (?,?)");

			getStudentStmt = conn.prepareStatement("SELECT * FROM student");

			deleteAllStudentsStmt = conn
					.prepareStatement("DELETE FROM student");

			findStudentByNameStmt = conn
					.prepareStatement("SELECT id FROM student WHERE name = ?");

			findStudentBySurnameStmt = conn
					.prepareStatement("SELECT id FROM student WHERE surname = ?");

			deleteStudentStmt = conn
					.prepareStatement("DELETE FROM student WHERE id = ?");

		} catch (SQLException e) {

			e.printStackTrace();
		}
	}

	public void addStudent(Student student) {
		try {
			addStudentStmt.setString(1, student.getName());
			addStudentStmt.setString(2, student.getSurname());
			addStudentStmt.executeUpdate();
		} catch (SQLException e) {

			e.printStackTrace();
		}

	}

	public List<Student> getAllStudents() {
		List<Student> StudentList = new ArrayList<Student>();

		try {
			ResultSet rs = getStudentStmt.executeQuery();

			while (rs.next()) {
				StudentList.add(new Student(rs.getString("name"), rs
						.getString("surname")));
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return StudentList;
	}

	public void deleteAllStudents() {
		try {
			deleteAllStudentsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public List<Integer> findStudentByName(String name) {
		try {
			List<Integer> result = new ArrayList<Integer>();
			findStudentByNameStmt.setString(1, name);
			ResultSet rs = findStudentByNameStmt.executeQuery();
			while (rs.next())
				result.add(rs.getInt("ID"));
			return result;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	public List<Integer> findStudentBySurname(String surname) {
		try {
			List<Integer> result = new ArrayList<Integer>();
			findStudentBySurnameStmt.setString(1, surname);
			ResultSet rs = findStudentBySurnameStmt.executeQuery();
			while (rs.next())
				result.add(rs.getInt("ID"));
			return result;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	public void deleteStudent(List<Integer> list) {
		try {
			for (Integer id : list) {
				deleteStudentStmt.setInt(1, id);
				deleteStudentStmt.executeUpdate();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	// klasa anonimowa
	public void printStudentWithCondition(List<Student> StudentList,
			Condition condition) {
		for (Student student : StudentList) {
			if (condition.getCondition(student)) {
				System.out.println("Name: " + student.getName()
						+ "\tSurname: " + student.getSurname());
			}
		}
	}

}